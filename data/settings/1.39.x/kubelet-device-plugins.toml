[[docs.tag.nvidia-mig]]
heading = "NVIDIA Multi-Instance GPU (MIG)"
description = """
Bottlerocket supports NVIDIA’s Multi-Instance GPU (MIG) feature on Kubernetes nodes through the [nvidia-k8s-device-plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#with-cuda-time-slicing).
This functionality enables system administrators to partition the node’s GPU(s) into several separate GPU instances, which can then be assigned to individual pods for executing various workloads.
To learn more about MIG and its options, please take a look at the NVIDIA documentation, like their [Official Documentation](https://docs.nvidia.com/datacenter/cloud-native/kubernetes/latest/index.html), [Kubernetes plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#nvidia-device-plugin-for-kubernetes) and [technical blog](https://developer.nvidia.com/blog/improving-gpu-utilization-in-kubernetes/#multi-instance_gpu_mig).

<h5>Lifecycle</h5>

MIG configuration can be defined through user-data or apiclient for an instance running Bottlerocket Kubernetes NVIDIA variant.
The profile (number of partitions) applied to the GPUs is dependent on the GPU model. \
Modifications to the MIG configuration will not affect the node immediately, allowing existing workloads to continue in the node. The node needs to be restarted to allow draining the node. \
The MIG configuration is then applied at boot time by a `systemd` service.

<h5>Use Cases</h5>

The MIG feature is disabled by default in Bottlerocket. This feature provides memory and fault isolation at the hardware layer as described [here](https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/latest/gpu-sharing.html#comparison-time-slicing-and-multi-instance-gpu).
According to [NVIDIA](https://docs.nvidia.com/datacenter/cloud-native/kubernetes/latest/index.html#mig-support-in-kubernetes), this feature is beneficial for workloads that do not fully saturate the GPU’s compute capacity and therefore users may want to run different workloads in parallel to maximize utilization.

<h5>Customer Advisory</h5>

When MIG is enabled, NVLinks are <b>NOT</b> supported as mentioned in [NVIDIA Documentation](https://docs.nvidia.com/datacenter/tesla/fabric-manager-user-guide/index.html#interoperability-with-mig).

<h5>Example Usage</h5>

In a node with Bottlerocket Kubernetes NVIDIA variant, if the following configuration were applied, the plugin would enable MIG and apply `2g.10gb` profile on nodes with <b>NVIDIA A100 40GB</b> GPUs (3 partitions) and apply `1g.20gb` profile on nodes with <b>NVIDIA H100 80GB</b> GPUs (4 partitions).
If we assume, they are P4 and P5 instances respectively with 8 GPUs, the plugin would advertise 24 (8 GPUs x 3 partitions) and 32 (8 GPUs x 4 partitions) `nvidia.com/gpu` resources to Kubernetes instead of 8. The `nvidia-k8s-device-plugin` creates the required number of references to each GPU and distributes them to any requestor.
"""

tag_name = "nvidia-mig"
example = [{ type = "toml", tab = "TOML", source = '''
[settings.kubelet-device-plugins.nvidia]
device-partitioning-strategy = "mig"

[settings.kubelet-device-plugins.nvidia.mig.profile]
"a100.40gb"="2g.10gb"
"h100.80gb"="4"
''' }, { type = "shell", tab = "Shell", source = '''
apiclient set --json '{
  "settings": {
    "kubelet-device-plugins": {
      "nvidia": {
        "device-partitioning-strategy": "mig",
        "mig":{
            "profile":{
                "a100.40gb": "2g.10gb",
                "h100.80gb": "4",
            }
        }
      }
    }
  }
}'
''' }]

[[docs.tag.nvidia-time-slicing]]
heading = "NVIDIA Time-Slicing"
description = """
Bottlerocket supports NVIDIA GPU time-slicing on Kubernetes nodes through the [nvidia-k8s-device-plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#with-cuda-time-slicing).
This functionality enables system administrators to allocate a set of replicas on the node's GPU(s), which can then be assigned to individual pods for executing various workloads. \
To learn more about Time-Slicing and its options, please take a look at the NVIDIA documentation, like their [Kubernetes plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#with-cuda-time-slicing) and [technical blog](https://developer.nvidia.com/blog/improving-gpu-utilization-in-kubernetes/).

<h5>Lifecycle</h5>

When time-slicing configuration is defined on a Bottlerocket Kubernetes node with NVIDIA GPU variants, the configuration is applied to all GPUs present on the node.
Modifications to the time-slicing configuration will affect the advertised resources available on the node.
Existing pods that were already running and consuming the GPU are not automatically removed or restarted.
Therefore, it is recommended to configure time-slicing settings before deploying pods to ensure consistency across all GPU workloads.

<h5>Use Cases</h5>

The time-slicing feature is disabled by default in Bottlerocket. This feature does not provide memory or fault isolation between replicas, and has unique resource request behavior as described [here](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#with-cuda-time-slicing).
According to [NVIDIA](https://developer.nvidia.com/blog/improving-gpu-utilization-in-kubernetes/#virtualization_with_vgpu), this feature is best used for over subscribing the GPU when needing to run multiple applications that are not latency-sensitive or can tolerate jitter.

<h5>Example Usage</h5>

In a Bottlerocket Kubernetes NVIDIA variant, if the below configuration were applied to a node with 8 GPUs on it, the plugin would now advertise 80 `nvidia.com/gpu.shared` resources to Kubernetes instead of 8 (8 GPU’s x 10 replicas = 80).
The nvidia-k8s-device-plugin creates 10 references to each GPU and distributes them to any requestor. For behavior details, please refer to [NVIDIA documentation](https://docs.nvidia.com/datacenter/cloud-native/gpu-operator/latest/gpu-sharing.html#about-configuring-gpu-time-slicing).
"""

tag_name = "nvidia-time-slicing"
example = [{ type = "toml", tab = "TOML", source = '''
[settings.kubelet-device-plugins.nvidia]
device-sharing-strategy = "time-slicing"

[settings.kubelet-device-plugins.nvidia.time-slicing]
replicas = 10
''' }, { type = "shell", tab = "Shell", source = '''
apiclient set --json '{
  "settings": {
    "kubelet-device-plugins": {
      "nvidia": {
        "device-sharing-strategy": "time-slicing",
        "time-slicing": {
            "replicas": 10
        }
      }
    }
  }
}'
''' }]

[[docs.ref.nvidia-device-id-strategy]]
name_override = "nvidia.device-id-strategy"
description = "Specifies the desired strategy for passing device IDs to the container."
default = "`index`"
accepted_values = ["`index`", "`uuid`"]
see = [
    [
        "[NVIDIA K8 Device Plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#configuration-option-details)",
    ],
]

[[docs.ref.nvidia-device-list-strategy]]
name_override = "nvidia.device-list-strategy"
description = """
Specifies the desired strategy for passing the device list to the container. If the value is set to:
* `volume-mounts`, the list of devices is passed as a set of volume mounts instead of as an environment variable to instruct the NVIDIA Container Runtime to inject the devices.
* `envvar`, the `NVIDIA_VISIBLE_DEVICES` environment variable is used to select the devices that are to be injected by the NVIDIA Container Runtime.
"""
default = "`volume-mounts`"
accepted_values = ["`volume-mounts`", "`envvar`"]
see = [
    [
        "[NVIDIA K8 Device Plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#configuration-option-details)",
    ],
    [
        "[Read list of GPU devices from volume mounts instead of NVIDIA_VISIBLE_DEVICES](https://docs.google.com/document/d/1uXVF-NWZQXgP1MLb87_kMkQvidpnkNWicdpO2l9g-fw/edit?tab=t.0#heading=h.xtqvwyv8lv4c)",
    ],
]
tags = ["nvidia"]

[[docs.ref.nvidia-device-partitioning-strategy]]
name_override = "nvidia.device-partitioning-strategy"
description = "Specifies the desired partitioning strategy of the GPU resource."
default = "`none`"
accepted_values = ["`none`", "`mig`"]
see = [
    [
        "[NVIDIA K8 Device Plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#configuration-option-details)",
    ],
]
tags = ["nvidia-mig"]

[[docs.ref.nvidia-mig-profile]]
name_override = "nvidia.mig.profile"
note = "Add quotes (`\"`) around keys and values as they contain dots (`.`)."
description = "Specifies the MIG profile or number of partitions for the given GPU model. Please check out [this](https://aws.amazon.com/ec2/instance-types/#Accelerated_Computing) AWS resource to find out the GPU model based on instance type in AWS. For example: `p5.48xlarge` instance has 8 <b>NVIDIA H100</b> GPUs each with 80 GB GPU memory. <p> The key `<gpu-model>` has 2 parts - NVIDIA GPU model, for eg. A100, H100, H200, etc. and GPU memory, for eg. 40 GB, 80 GB, etc. in this format `{GPU model}.{GPU memory}` in lower case. The resulting string should follow the regex `^([a-z])(\\d+)\\.(\\d+)gb$`. For eg. NVIDIA A100 GPU with 40 GB GPU memory found in P4d instances will be formatted as `a100.40gb`. </p> <p> The value can be specified in one of two formats: either as the number of GPU partitions or as a specific MIG profile. While the specific MIG profile format is universally supported across all NVIDIA GPUs that support MIG, the number of partitions format is exclusively available for select NVIDIA GPUs: <b>NVIDIA A100 40 GB</b>, <b>NVIDIA A100 80 GB</b>, <b>NVIDIA H100 80 GB</b> and <b>NVIDIA H200 141 GB</b>. For eg. the MIG Profile `2g.10gb` creates 3 partitions in a <b>NVIDIA A100 40 GB</b> GPU. So, the value of the setting would either be `\"a100.40gb\" = \"3\"` or `\"a100.40gb\" = \"2g.10gb\"`.</p> <p>To learn more about the supported number of partitions or the MIG Profile, please consult [NVIDIA's MIG Documentation](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#supported-mig-profiles) for a comprehensive list of supported configurations. </p>"
accepted_values = ["Number of partitions: `\"1\", \"2\", \"3\", \"4\", \"7\"` (currently supported for <b>NVIDIA A100 40 GB</b>, <b>A100 80 GB</b>, <b>H100 80 GB</b> and <b>H200 141 GB</b>)", "MIG Profile: strings following the regex `^[0-9]g\\.\\d+gb$`. Eg. `1g.5gb`, `7g.40gb`, `2g.35gb` etc. (supported across all NVIDIA GPUs with MIG capabilities)"]
tags = ["nvidia-mig"]
[[docs.ref.nvidia-mig-profile.example]]
direct_toml = """
[settings.kubelet-device-plugins.nvidia.mig.profile]
"a100.40gb" = "1g.5gb"
"a100.80gb" = "3"
"h100.80gb" = "4"
"h200.141gb" = "2g.35gb"
"""

[[docs.ref.nvidia-device-sharing-strategy]]
name_override = "nvidia.device-sharing-strategy"
description = "Specifies the desired sharing strategy of of the GPU resource."
default = "`none`"
accepted_values = ["`none`", "`time-slicing`"]
see = [
    [
        "[NVIDIA K8 Device Plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#configuration-option-details)",
    ],
]
tags = ["nvidia-time-slicing"]

[[docs.ref.nvidia-pass-device-specs]]
name_override = "nvidia.pass-device-specs"
description = "Specifies passing the paths and desired device node permissions for any NVIDIA devices being allocated to the container. "
default = "`true`"
accepted_values = ["`true`", "`false`"]
see = [
    [
        "[NVIDIA K8 Device Plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#configuration-option-details)",
    ],
]

[[docs.ref.nvidia-time-slicing-replicas]]
name_override = "nvidia.time-slicing.replicas"
description = "Specifies the desired sharing strategy of of the GPU resource."
default = "`2` when `settings.kubelet-device-plugins.nvidia.device-sharing-strategy` is set to `time-slicing`."
accepted_values = ["positive integer number `>=2`"]
see = [
    [
        "[NVIDIA K8 Device Plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#configuration-option-details)",
    ],
]
tags = ["nvidia-time-slicing"]

[[docs.ref.nvidia-time-slicing-rename-by-default]]
name_override = "nvidia.time-slicing.rename-by-default"
description = """
Specifies the Kubernetes advertised resource as `<resource-name>.shared` instead of `<resource-name>`.

For example, if this field is set to `true` the nodes that are configured for time-sliced GPU access then advertise the resource as `nvidia.com/gpu.shared`. Setting this field to true can be helpful if you want to schedule pods on GPUs with shared access by specifying `<resource-name>.shared` in the resource request. When this field is set to `false`, the advertised resource name is not modified, such as `nvidia.com/gpu`.
"""
default = "`true` when `settings.kubelet-device-plugins.nvidia.device-sharing-strategy` is set to `time-slicing`."
accepted_values = ["`true`", "`false`"]
see = [
    [
        "[NVIDIA K8 Device Plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#with-cuda-time-slicing)",
    ],
]
tags = ["nvidia-time-slicing"]

[[docs.ref.nvidia-time-slicing-fail-requests-greater-than-one]]
name_override = "nvidia.time-slicing.fail-requests-greater-than-one"
description = """
Specifies the resource request handling behavior when a request has more than one GPU replica.

As described by [NVIDIA](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#with-cuda-time-slicing), the purpose of this field is to enforce awareness that requesting more than one GPU replica does not result in receiving more proportional access to the GPU. When set to `true`, a resource request for more than one GPU fails with an `UnexpectedAdmissionError`. In this case, you must manually delete the pod, update the resource request, and redeploy.

"""
default = "`true` when `settings.kubelet-device-plugins.nvidia.device-sharing-strategy` is set to `time-slicing`."
accepted_values = ["`true`", "`false`"]
see = [
    [
        "[NVIDIA K8 Device Plugin](https://github.com/NVIDIA/k8s-device-plugin?tab=readme-ov-file#with-cuda-time-slicing)",
    ],
]
tags = ["nvidia-time-slicing"]
